#!/usr/bin/env bash

#
# git-branches
#

if [[ $# -gt 0 ]]; then
  if [[ "$1" =~ ^-?(d|D) ]]; then
    branch_array=($(git branch --list | grep -v "\*\|^..\(master\|develop\)$" | sed 's/^..//'))
    count=0
    for i in "${branch_array[@]}"; do
      printf "$count $(printf ' %.0s' $(seq 1 $((4 - ${#count})))) $i \e[38;5;255m$(git config branch.$i.description)\e[0m\n"
      count=$((count + 1))
    done
    printf "\n# Enter the numbers of branches you want to delete separated by spaces. You may also add an"
    printf "\n# exclamation mark after a number if you want to delete it at origin too (e.g., 0 3! 6 7 9!).\n\n"
    branch_local=''
    branch_origin=''
    read -er -a choices -p "    > " && printf "\n"
    [[ "${choices[@]}" =~ [:alpha:] ]] && printf "Letters are not allowed\n" && exit 0
    printf "\n# Are you sure you want to delete the following branches?\n"
    printf "\t%s\n" "${choices[@]}"
    read -erp "  Confirm [y/n]: " confirm && printf "\n"
    [[ ! "$confirm" =~ ^y|Y ]] && printf "Not deleting branches\n" && exit 0
    for i in "${choices[@]}"; do
      if [[ "$i" =~ \!$ ]]; then
        index="${i::-1}"
        br="${branch_array[$index]}"
        git branch -d "$br"
        [[ "$?" -ne 0 ]] && branch_local=$branch_local"\n$br"
        git push origin --delete "$br"
        [[ "$?" -ne 0 ]] && branch_origin=$branch_origin"\n$br"
      else
        git branch -d "${branch_array[$i]}"
        [[ "$?" -ne 0 ]] && branch_local=$branch_local"\n$br"
      fi
    done
    [[ ! -z "$branch_local" ]] && printf "Failed to delete the following branches locally:$branch_local\n"
    [[ ! -z "$branch_origin" ]] && printf "Failed to delete the following branches from origin:$branch_origin\n"
  else
    printf "# This command lists your branches and their descriptions next to them.\n"
    printf "# usage: git branches [-d|-h]\n# \t[-d]: Interactively delete your branches\n# \t[-h]: Print help text\n"
    exit 0
  fi
else
  while read -r branch; do
    clean_branch_name="${branch//\*\ /}"
    description=$(git config branch.$clean_branch_name.description)
    if [[ "${branch::1}" == "*" ]]; then
      printf "* \e[38;5;10m$clean_branch_name\e[0m \e[38;5;255m$description\e[0m\n"
    else
      printf "  $branch \e[38;5;255m$description\e[0m\n"
    fi
  done <<< "$(git branch --list)"
fi

