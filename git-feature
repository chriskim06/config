#!/usr/bin/env bash

#
# git-feature
#

_get_jira_ticket_for_description () {
  name=$2
  pass=$3
  jira_url=$4
  if [[ -z "$2" && -z "$3" ]]; then
    if ! [[ -z ${USERNAME+x} || -z ${PASSWORD+x} ]]; then
      name=$USERNAME
      pass=$PASSWORD
    fi
  fi
  if [[ -z "$4" && ! -z ${JIRA+x} ]]; then
    jira_url=$JIRA_URL
  fi
  if ! [[ -z "$name" || -z "$pass" ]]; then
    ticket=$(curl -s -u $name:$pass $jira_url$1)
    summary=$(printf "%s" "$ticket" | jq -M -r '.fields.summary')
    [[ ! -z "$summary" ]] && git config branch.$1.description "$summary"
  fi
}

if [[ $# -eq 0 ]]; then
  printf "Usage: git feature <branch> [<username> <password>]\n"
elif [[ -z "$(type -t jq)" ]]; then
  printf "This script requires jq to be installed in order to parse the JSON response from JIRA.\n"
else
  if [[ ! -z "$(git branch --all | grep $1)" ]]; then
    if [[ -z "$(git config branch.$1.description)" ]]; then
      read -e -r -p "$1 already exists but has no description. Try to get its JIRA summary? [y/n]: " choice && printf "\n"
      if [[ "$choice" =~ ^y|Y ]]; then
        _get_jira_ticket_for_description "$@"
      fi
    else
      printf "$1 has already been created and has a description.\n"
    fi
  else
    git checkout -b "$1" origin/master
    git push -u origin "$1"
    _get_jira_ticket_for_description "$@"
  fi
  [[ ! -z "$(__git_list_all_commands | grep 'branches')" ]] && git branches
fi

